
name: Build / Push Repo; Deploy to Swarm

on:
  push:
    branches:
      - production

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Used for AWS Role Assumption
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ vars.ROLE_ARN }}
          role-duration-seconds: 900
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Variables
        id: v
        run: |
          echo "::set-output name=date::$(date '+%m_%d_%Y')"
          echo "::set-output name=reponame::$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')"

      - name: Build and push
        uses: docker/build-push-action@v2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.v.outputs.reponame }}
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.v.outputs.date }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:build_${{ github.run_number }}
          build-args: |
            SET_GIT_SHA=${{ github.sha }}
            SET_BUILD_NUMBER=${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy
        env:
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          DOCKER_HOST: ssh://${{ secrets.REMOTE_SERVER_USERNAME }}@${{ secrets.REMOTE_SERVER_HOSTNAME }}
          ECR_REPOSITORY: ${{ steps.login-ecr.outputs.registry }}
          HOST: ${{ vars.HOST }}
          IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ steps.v.outputs.reponame }}:${{ steps.v.outputs.date }}
#          REGION: ${{ vars.AWS_DEFAULT_REGION }}
          APP_NAME: ${{ vars.APP_NAME }}
          BUCKET_NAME: ${{ vars.BUCKET_NAME }}
          BUCKET_PREFIX: ${{ vars.BUCKET_PREFIX }}
          CTR_RECORD_URL: ${{ vars.CTR_RECORD_URL }}
          LOGLEVEL: ${{ vars.LOGLEVEL }}
          OAUTH2_PROXY_BANNER: ${{ vars.OAUTH2_PROXY_BANNER }}
          OAUTH2_PROXY_CLIENT_ID: ${{ secrets.OAUTH2_PROXY_CLIENT_ID }}
          OAUTH2_PROXY_CLIENT_SECRET: ${{ secrets.OAUTH2_PROXY_CLIENT_SECRET }}
          OAUTH2_PROXY_COOKIE_SECRET: ${{ secrets.OAUTH2_PROXY_COOKIE_SECRET }}
          OAUTH2_PROXY_CUSTOM_SIGN_IN_LOGO: ${{ vars.OAUTH2_PROXY_CUSTOM_SIGN_IN_LOGO }}
          OAUTH2_PROXY_EMAIL_DOMAINS: ${{ vars.OAUTH2_PROXY_EMAIL_DOMAINS }}
          OAUTH2_PROXY_FOOTER: ${{ vars.OAUTH2_PROXY_FOOTER }}
          OAUTH2_PROXY_OIDC_ISSUER_URL: ${{ vars.OAUTH2_PROXY_OIDC_ISSUER_URL }}
          OAUTH2_PROXY_PROVIDER: ${{ vars.OAUTH2_PROXY_PROVIDER }}
          OAUTH2_PROXY_REVERSE_PROXY: ${{ vars.OAUTH2_PROXY_REVERSE_PROXY }}
          STREAMLIT_SERVER_COOKIESECRET: ${{ secrets.STREAMLIT_SERVER_COOKIESECRET }}
          TZ: ${{ vars.TZ }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.REMOTE_SERVER_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          echo -e "Host *\n  StrictHostKeyChecking no" > ~/.ssh/config
          docker stack deploy --with-registry-auth -c deploy/docker-compose.yml ${{ steps.v.outputs.reponame }}
          
